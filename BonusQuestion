import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import java.util.*;

// Class to represent a node in the graph
class Node {
    String name;

    Node(String name) {
        this.name = name;
    }
}

// Class to represent an edge between two nodes in the graph
class Edge {
    Node from; // Starting node of the edge
    Node to;   // Ending node of the edge
    double cost; // Cost or distance of traversing the edge

    Edge(Node from, Node to, double cost) {
        this.from = from;
        this.to = to;
        this.cost = cost;
    }
}

// Class representing the graph structure
class Graph {
    private Map<Node, List<Edge>> adjacencyMap; // Adjacency map to store the edges for each node

    Graph() {
        adjacencyMap = new HashMap<>(); // Initialize the adjacency map
    }

    // Method to add an edge to the graph
    void addEdge(Node from, Node to, double cost) {
        adjacencyMap.putIfAbsent(from, new ArrayList<>()); // Add starting node if not present
        adjacencyMap.get(from).add(new Edge(from, to, cost)); // Add edge to the list of edges for the starting node
    }

    // Method to get the list of edges for a given node
    List<Edge> getEdges(Node node) {
        return adjacencyMap.getOrDefault(node, Collections.emptyList()); // Return the list of edges or an empty list if node not found
    }
}

public class ShortestRouteFinder {
    private static Graph graph; // Declare a graph object to hold the graph data

    public static void main(String[] args) {
        // Sample input data generated by DataGenerator
        String jsonNodes = "[{\"name\":\"AA\"},{\"name\":\"BC\"},{\"name\":\"CE\"},{\"name\":\"DM\"}]";
        String jsonEdges = "[{\"from\":\"AA\",\"to\":\"BC\",\"cost\":1},{\"from\":\"BC\",\"to\":\"CE\",\"cost\":3.5},{\"from\":\"BC\",\"to\":\"DM\",\"cost\":2.5},{\"from\":\"CE\",\"to\":\"DM\",\"cost\":1.5}]";

        // Parse JSON data to nodes and edges
        List<Node> nodes = parseNodes(jsonNodes);
        List<Edge> edges = parseEdges(jsonEdges);

        // Build graph
        graph = buildGraph(nodes, edges);

        // Find shortest route between C to F
        Node startNode = new Node("C");
        Node endNode = new Node("F");
        List<Node> shortestRoute = findShortestRoute(startNode, endNode);

        // Print shortest route
        System.out.println("Shortest Route from C to F:");
        for (Node node : shortestRoute) {
            System.out.print(node.name + " ");
        }
    }

    // Method to parse JSON data into a list of nodes
    private static List<Node> parseNodes(String jsonNodes) {
        Gson gson = new Gson();
        return gson.fromJson(jsonNodes, new TypeToken<List<Node>>() {}.getType());
    }

    // Method to parse JSON data into a list of edges
    private static List<Edge> parseEdges(String jsonEdges) {
        Gson gson = new Gson();
        return gson.fromJson(jsonEdges, new TypeToken<List<Edge>>() {}.getType());
    }

    // Method to build the graph from nodes and edges
    private static Graph buildGraph(List<Node> nodes, List<Edge> edges) {
        Graph graph = new Graph(); // Create a new graph object
        for (Edge edge : edges) {
            Node fromNode = findNodeByName(nodes, edge.from.name); // Find the from node
            Node toNode = findNodeByName(nodes, edge.to.name); // Find the to node
            if (fromNode != null && toNode != null) { // Check if both nodes are found
                graph.addEdge(fromNode, toNode, edge.cost); // Add edge to the graph
                graph.addEdge(toNode, fromNode, edge.cost); // For undirected graph, add reverse edge as well
            }
        }
        return graph; // Return the constructed graph
    }

    // Method to find a node by its name in a list of nodes
    private static Node findNodeByName(List<Node> nodes, String name) {
        for (Node node : nodes) {
            if (node.name.equals(name)) {
                return node; // Return the node if found
            }
        }
        return null; // Return null if node not found
    }

    // Method to find the shortest route between two nodes using Dijkstra's algorithm
    private static List<Node> findShortestRoute(Node start, Node end) {
        Map<Node, Double> distance = new HashMap<>(); // Map to store the distance from the start node to each node
        Map<Node, Node> previous = new HashMap<>(); // Map to store the previous node on the shortest path to each node
        PriorityQueue<Node> queue = new PriorityQueue<>(Comparator.comparingDouble(distance::get)); // Priority queue to process nodes based on their distances

        distance.put(start, 0.0); // Distance from start node to itself is 0
        queue.add(start); // Add the start node to the queue

        // Dijkstra's algorithm
        while (!queue.isEmpty()) {
            Node current = queue.poll(); // Get the node with the smallest distance from the queue
            if (current.equals(end)) { // If we've reached the end node, exit the loop
                break;
            }
            for (Edge edge : graph.getEdges(current)) {
                double newDist = distance.get(current) + edge.cost; // Calculate the new distance to the neighbor node
                if (!distance.containsKey(edge.to) || newDist < distance.get(edge.to)) { // If the new distance is shorter than the current distance
                    distance.put(edge.to, newDist); // Update the distance
                    previous.put(edge.to, current); // Update the previous node
                    queue.add(edge.to); // Add the neighbor node to the queue
                }
            }
        }

        // Reconstruct the shortest path
        List<Node> shortestRoute = new ArrayList<>();
        Node current = end;
        while (previous.containsKey(current)) {
            shortestRoute.add(0, current); // Add each node to the beginning of the list
            current = previous.get(current); // Move to the previous node
        }
        shortestRoute.add(0, start); // Add the start node
        return shortestRoute; // Return the shortest route
    }
}
